import pandas as pd
import numpy as np
import matplotlib.pyplot  as plt
import datetime
from datetime import timedelta, timezone, datetime
from scipy.optimize import curve_fit

name = '/content/M_413.csv'
df = pd.read_csv(name, header = 0)
df

name_file = (name.split(".")[0])
name_file = name_file.replace("/content/", "")
name_file

post_practice = df.response_resp_log.size - 70
post_practice

error_practice = post_practice - 20
error_practice

perc_answer = pd.crosstab(df.response_resp_log[post_practice:], df.tempo_log, margins=True, normalize = 'columns')
perc_answer

time_stm = np.array([500.0, 630.0, 793.5, 1000.0, 1260.0, 1587.0, 2000])
time_stm

perc_long = perc_answer[0:1].values
perc_long = np.delete(perc_long,[7])
perc_long 

#Curve Ajustment (Sigmoid Curve)

def sigmoid(x, a, b):
    return 1.0 / (1.0 + np.exp(-a*(x-b)))

popt, pcov = curve_fit(sigmoid, time_stm, perc_long, method='dogbox', bounds=([0.,300.],[0.8,2300.]))

#Bisection Point

pnt_bisec = round(popt[1],4)
pnt_bisec


#Differential Threshold

    #0,25
T1_ = popt[1] - (np.log(3)/popt[0])
T1_

    #0,75
T2_ = popt[1] + (np.log(3)/popt[0])
T2_


lim_dif_ = ((T2_-T1_)/2)
lim_dif_

#Weber's Ratio

WR = (T2_-T1_)/pnt_bisec
WR

#GRAPH COMMANDs

rng = np.arange(time_stm[0],time_stm[-1],0.1)
pnt_bisec = round(popt[1],4)

plt.figure(figsize = (15,10))
plt.plot(time_stm, perc_long, color='green', marker='o',linestyle = '',ms = 7)
plt.plot(rng, sigmoid(rng, *popt), label="Ajusted Curve [Sigmoid]", linestyle =':',lw = 3)
plt.ylabel('Proportion "Long" Responses',fontsize = 14)
plt.xlabel('Temporal Duration (ms)',fontsize = 14)
plt.xticks(time_stm,time_stm,fontsize = 12)
plt.yticks(np.arange(0, 1.1, step=0.1), fontsize = 12)
plt.legend(loc='upper left',fontsize = 14)
plt.annotate(pnt_bisec,
            xy=(popt[1], 0.5), xycoords='data',
            xytext=(popt[1]-47, 0.), textcoords=("data", "axes fraction"),
            arrowprops=dict(arrowstyle="<-",connectionstyle="arc3"),
            bbox=dict(boxstyle="round", fc="w"),fontsize=12
            )
plt.annotate(round(T1_,4),
            xy=(T1_, 0.25), xycoords='data',
            xytext=(T1_-200, 0.265), textcoords=("data", "axes fraction"),
            arrowprops=dict(arrowstyle="<-",connectionstyle="arc3"),
            bbox=dict(boxstyle="round", fc="w"),fontsize=12
            )
plt.annotate(round(T2_,4),
            xy=(T2_, 0.75), xycoords='data',
            xytext=(T2_+100, 0.72), textcoords=("data", "axes fraction"),
            arrowprops=dict(arrowstyle="<-",connectionstyle="arc3"),
            bbox=dict(boxstyle="round", fc="w"),fontsize=12
            )

plt.title('Ajusted Curve for the Temporal Bisection Task',fontsize = 18)
plt.grid()

plt.savefig('BISSEC_{0}'.format(name_file),dpi=1000, transparent=True,bbox_inches='tight')
plt.show()
